services:
  # üóÑÔ∏è Base de donn√©es PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: ocm-database
    environment:
      POSTGRES_DB: opencommunitymanager
      POSTGRES_USER: ocm_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ocm_user -d opencommunitymanager"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ocm-network

  # üêç Backend Flask API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ocm-backend
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      DATABASE_URL: postgresql://ocm_user:${DB_PASSWORD:-secure_password}@database:5432/opencommunitymanager
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-here}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://yourdomain.com}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ocm-network

  # ‚öõÔ∏è Frontend React (Production)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ocm-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
      VITE_APP_NAME: "Open Community Manager"
      VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./ssl:/etc/nginx/ssl:ro # Pour les certificats SSL
    networks:
      - ocm-network

  # üöÄ Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: ocm-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ocm-network

  # üìä Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: ocm-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ocm-network

  # üìà Grafana pour les dashboards (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: ocm-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - ocm-network

# üìÅ Volumes persistants
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# üåê R√©seau
networks:
  ocm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
