#!/usr/bin/env python3
"""Script d'initialisation de la base de donn√©es"""

import os
import sys
import uuid
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Configuration explicite pour le d√©veloppement local
os.environ['DATABASE_URL'] = f'sqlite:///{os.path.abspath("instance/app.db")}'

from app import create_app, db

def init_database():
    """Initialiser la base de donn√©es avec toutes les tables"""
    print("üöÄ Initialisation de la base de donn√©es...")
    
    try:
        app = create_app()
        with app.app_context():
            print(f"üìç URI: {app.config['SQLALCHEMY_DATABASE_URI']}")
            
            # Supprimer toutes les tables existantes
            print("üóëÔ∏è  Suppression des tables existantes...")
            db.drop_all()
            
            # Cr√©er toutes les tables
            print("üìä Cr√©ation de toutes les tables...")
            db.create_all()
            
            # V√©rifier les tables cr√©√©es
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            print(f"‚úÖ Tables cr√©√©es: {tables}")
            
            # Cr√©er quelques donn√©es de test pour le syst√®me de guidance
            from app.models.guidance import DocumentTemplate, OrganizationalDiagnostic
            from app.models.guidance import MaturityLevel  # Import de l'enum
            from app.models.association import Association
            
            # Cr√©er une association de test si elle n'existe pas
            association = Association.query.first()
            if not association:
                print("üë• Cr√©ation d'une association de test...")
                association = Association(
                    name="Association Test",
                    description="Association pour tester le syst√®me de guidance",
                    email="test@example.com",
                    phone="0123456789",
                    address="123 Rue Test, 75001 Paris",
                    password_hash="test_hash"  # Normalement hash√©
                )
                db.session.add(association)
                db.session.commit()
                print(f"‚úÖ Association cr√©√©e avec ID: {association.id}")
            
            # Cr√©er quelques templates de documents
            templates = [
                {
                    'name': 'Proc√®s-verbal d\'Assembl√©e G√©n√©rale',
                    'category': 'governance',
                    'description': 'Template pour les PV d\'AG',
                    'template_content': '# Proc√®s-verbal de l\'Assembl√©e G√©n√©rale\n\n**Date:** {{date}}\n**Lieu:** {{lieu}}\n**Pr√©sents:** {{participants}}\n\n## Ordre du jour\n\n{{ordre_du_jour}}\n\n## D√©cisions prises\n\n{{decisions}}',
                    'template_variables': [
                        {"name": "date", "type": "date", "description": "Date de l'AG", "required": True},
                        {"name": "lieu", "type": "text", "description": "Lieu de l'AG", "required": True},
                        {"name": "participants", "type": "textarea", "description": "Liste des participants", "required": True},
                        {"name": "ordre_du_jour", "type": "textarea", "description": "Points √† l'ordre du jour", "required": True},
                        {"name": "decisions", "type": "textarea", "description": "D√©cisions prises", "required": True}
                    ],
                    'organization_types': ["association", "cooperative"],
                    'maturity_level': MaturityLevel.STRUCTURE,
                    'required': True
                },
                {
                    'name': 'Rapport d\'activit√© annuel',
                    'category': 'reporting',
                    'description': 'Template pour le rapport d\'activit√©',
                    'template_content': '# Rapport d\'activit√© {{annee}}\n\n## Activit√©s r√©alis√©es\n\n{{activites}}\n\n## Bilan financier\n\n{{bilan}}\n\n## Perspectives\n\n{{perspectives}}',
                    'template_variables': [
                        {"name": "annee", "type": "number", "description": "Ann√©e du rapport", "required": True},
                        {"name": "activites", "type": "textarea", "description": "Activit√©s r√©alis√©es", "required": True},
                        {"name": "bilan", "type": "textarea", "description": "Bilan financier", "required": True},
                        {"name": "perspectives", "type": "textarea", "description": "Perspectives", "required": False}
                    ],
                    'organization_types': ["association", "cooperative", "ong"],
                    'maturity_level': MaturityLevel.EMERGENT,
                    'required': False
                },
                {
                    'name': 'Demande de subvention',
                    'category': 'funding',
                    'description': 'Template pour les demandes de subvention',
                    'template_content': '# Demande de subvention\n\n**Organisme:** {{organisme}}\n**Montant demand√©:** {{montant}}\n**Projet:** {{projet}}\n\n## Description du projet\n\n{{description}}\n\n## Budget pr√©visionnel\n\n{{budget}}',
                    'template_variables': [
                        {"name": "organisme", "type": "text", "description": "Organisme demandeur", "required": True},
                        {"name": "montant", "type": "number", "description": "Montant demand√©", "required": True},
                        {"name": "projet", "type": "text", "description": "Nom du projet", "required": True},
                        {"name": "description", "type": "textarea", "description": "Description du projet", "required": True},
                        {"name": "budget", "type": "textarea", "description": "Budget pr√©visionnel", "required": True}
                    ],
                    'organization_types': ["association", "ong"],
                    'maturity_level': MaturityLevel.ORGANISE,
                    'required': False
                }
            ]
            
            for template_data in templates:
                existing = DocumentTemplate.query.filter_by(name=template_data['name']).first()
                if not existing:
                    template_data['id'] = str(uuid.uuid4())  # G√©n√©rer un UUID
                    template = DocumentTemplate(**template_data)
                    db.session.add(template)
            
            # Cr√©er un diagnostic de test
            existing_diag = OrganizationalDiagnostic.query.filter_by(association_id=association.id).first()
            if not existing_diag:
                print("üìã Cr√©ation d'un diagnostic de test...")
                from datetime import datetime, timedelta
                
                diagnostic = OrganizationalDiagnostic(
                    id=str(uuid.uuid4()),  # G√©n√©rer un UUID
                    association_id=association.id,
                    current_maturity_level=MaturityLevel.STRUCTURE,
                    target_maturity_level=MaturityLevel.ORGANISE,
                    overall_score=7.2,
                    category_scores={"governance": 7, "finances": 8, "communication": 6, "events": 9, "compliance": 5},
                    strengths=["Excellente gestion des √©v√©nements", "Bonne situation financi√®re", "√âquipe motiv√©e"],
                    weaknesses=["Conformit√© r√©glementaire √† am√©liorer", "Communication externe limit√©e", "Documentation manquante"],
                    next_assessment_date=datetime.utcnow() + timedelta(days=365)  # Dans un an
                )
                db.session.add(diagnostic)
            
            db.session.commit()
            print("‚úÖ Donn√©es de test cr√©√©es")
            
            print("\nüéØ Base de donn√©es initialis√©e avec succ√®s!")
            print(f"üìä Total de tables: {len(tables)}")
            print("üîó Le syst√®me de guidance est pr√™t √† √™tre utilis√©!")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = init_database()
    
    if success:
        print("\n‚úÖ Vous pouvez maintenant d√©marrer le serveur avec: python run.py")
    else:
        print("\n‚ùå √âchec de l'initialisation - v√©rifiez les erreurs ci-dessus")
